#!/usr/bin/env python3

import gi
import subprocess
import threading
import gettext
import locale
import os
import shutil
import shlex
import distro

gi.require_version("Gtk", "4.0")
gi.require_version("Adw", "1")
from gi.repository import Gtk, Adw, GLib, Gdk

# --- Localization Setup ---
APP_NAME = "linexin-updater"
LOCALE_DIR = os.path.abspath("/usr/share/locale")

# Set up the locale environment
locale.setlocale(locale.LC_ALL, '')
locale.bindtextdomain(APP_NAME, LOCALE_DIR)
gettext.bindtextdomain(APP_NAME, LOCALE_DIR)
gettext.textdomain(APP_NAME)
_ = gettext.gettext
# --------------------------


class MainWindow(Adw.ApplicationWindow):
    def __init__(self, app):
        super().__init__(application=app)
        # App info and reset of potentially lost data
        self.set_title("")
        self.set_default_size(600, 300) # Increased height for image
        self.progress_visible = False
        self.progress_data = ""
        self.install_started = False
        self.error_message = None

        # Main vertical box to hold header bar and content
        main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
        self.set_content(main_box)

        # Add Adwaita header bar
        self.header_bar = Adw.HeaderBar()
        self.header_bar.set_title_widget(Adw.WindowTitle.new(self.get_title(), ""))
        main_box.append(self.header_bar)
        main_box.append(self.header_bar)
        css_provider = Gtk.CssProvider()
        css = """
        headerbar {
            background-color: transparent;
            border: none;
            box-shadow: none;
        }
        .titlebar {
            background-color: transparent;
        }
        """
        css_provider.load_from_data(css.encode())
        Gtk.StyleContext.add_provider_for_display(
            Gdk.Display.get_default(),
            css_provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )



        # Main horizontal box for content
        hbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=20,
                       margin_top=20, margin_bottom=20, margin_start=20, margin_end=20)
        main_box.append(hbox)


        ### CHANGED ### - Replaced the right-side Gtk.Box with a Gtk.Stack
        # This allows switching between the image, info label, and progress view.
        self.content_stack = Gtk.Stack()
        self.content_stack.set_transition_type(Gtk.StackTransitionType.SLIDE_UP_DOWN)
        self.content_stack.set_hexpand(True)
        self.content_stack.set_vexpand(True)
        hbox.append(self.content_stack)

        # --- Stack Page 1: Welcome Image ---
        # NOTE: Replace "path/to/your/image.png" with the actual path to your image file.
        welcome_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=15)
        welcome_box.set_valign(Gtk.Align.CENTER) # Center the whole box vertically
        welcome_box.set_halign(Gtk.Align.CENTER) # Center the whole box horizontally

        # --- Image ---
        image_path = "/usr/share/icons/sync.svg"
        welcome_image = Gtk.Image()
        if os.path.exists(image_path):
            welcome_image.set_from_file(image_path)
        else:
            welcome_image.set_from_icon_name("view-refresh")
        
        welcome_image.set_pixel_size(125) # Set your desired image size
        
        # Add the image to the container box
        welcome_box.append(welcome_image)

        # --- Text Label ---
        welcome_label = Gtk.Label()
        # You can use Pango markup for styling
        #welcome_label.set_markup('<span size="x-large" weight="bold">Find and install updates</span>')

        # Add the label to the container box
        #welcome_box.append(welcome_label)

        # Add the container box (with both widgets) to the stack
        self.content_stack.add_named(welcome_box, "welcome_image")


        # --- Stack Page 2: Info Label ---
        infobox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=15)
        infobox.set_valign(Gtk.Align.CENTER) # Center the whole box vertically
        infobox.set_halign(Gtk.Align.CENTER) # Center the whole box horizontally

        # --- Image ---
        fail_image_path = "/usr/share/icons/fault.svg"
        
        if os.path.exists(fail_image_path):
            self.fail_image = Gtk.Image()
            self.fail_image.set_from_file(fail_image_path)
            self.fail_image.set_pixel_size(100) # Set your desired image size
        else:
            self.fail_image = Gtk.Label()
            self.fail_image.set_markup('<span size="50pt">❌</span>')
            #self.fail_image.set_from_icon_name("application-x-executable")
        
        

        success_image_path = "/usr/share/icons/confirm.svg"
        
        if os.path.exists(success_image_path):
            self.success_image = Gtk.Image()
            self.success_image.set_from_file(success_image_path)
            self.success_image.set_pixel_size(100) # Set your desired image size
        else:
            self.success_image = Gtk.Label()
            self.success_image.set_markup('<span size="50pt">✅</span>')
            #self.success_image.set_from_icon_name("application-x-executable")
        
        
        


        # Add the image to the container box
        infobox.append(self.fail_image)
        infobox.append(self.success_image)
        self.fail_image.set_visible(False)
        self.success_image.set_visible(False)

        # --- Text Label ---
        self.info_label = Gtk.Label()
        self.info_label.set_vexpand(True)
        self.info_label.set_hexpand(True)
        self.info_label.set_wrap(True)
        self.info_label.set_justify(Gtk.Justification.CENTER)
        infobox.append(self.info_label)
        self.content_stack.add_named(infobox, "info_message")

        # Add the label to the container box
        


        # --- Stack Page 3: Progress View ---
        self.output_buffer = Gtk.TextBuffer()
        self.output_textview = Gtk.TextView.new_with_buffer(self.output_buffer)
        self.output_textview.set_wrap_mode(Gtk.WrapMode.WORD)
        self.output_textview.set_editable(False)
        self.output_textview.set_cursor_visible(False)
        self.output_textview.set_monospace(True)
        self.output_textview.set_left_margin(10)
        self.output_textview.set_right_margin(10)
        self.output_textview.set_top_margin(5)
        self.output_textview.set_bottom_margin(5)

        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        scrolled_window.set_child(self.output_textview)
        
        output_frame = Gtk.Frame()
        output_frame.set_child(scrolled_window)
        self.content_stack.add_named(output_frame, "progress_view")

        # Set the initial visible page of the stack
        self.content_stack.set_visible_child_name("welcome_image")

        # Left vertical button group
        button_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=12)
        hbox.append(button_box)

        # A single button to start the installation process
        self.btn_install = Gtk.Button(label=_("Install updates"))
        self.btn_toggle_progress = Gtk.Button(label=_("Show progress"), sensitive=False)

        self.btn_install.set_margin_start(150)
        self.btn_install.set_margin_end(150)
        self.btn_install.set_vexpand(True)
        self.btn_install.add_css_class("suggested-action")

        self.btn_toggle_progress.set_margin_start(150)
        self.btn_toggle_progress.set_margin_end(150)
        self.btn_toggle_progress.set_vexpand(True)
        self.btn_toggle_progress.set_visible(False)

        self.btn_install.connect("clicked", self.on_install_clicked)
        self.btn_toggle_progress.connect("clicked", self.on_toggle_progress_clicked)

        button_box.append(self.btn_install)
        button_box.append(self.btn_toggle_progress)



        # Connect to the close-request signal
        self.connect("close-request", self.on_close_request)

    def on_close_request(self, *args):
        if self.install_started:
            dialog = Adw.MessageDialog(
                heading=_("Update in progress!"),
                body=_("Please wait until the update is complete before closing the application."),
                transient_for=self,
                modal=True
            )
            dialog.set_default_size(500, 200)
            dialog.add_response("ok", _("OK"))
            dialog.set_default_response("ok")
            dialog.set_close_response("ok")
            dialog.present()
            return True
        return False

    def on_install_clicked(self, button):
        product_name = distro.name()

        # Properly quote the argument to cowsay to handle the apostrophe
        command = f"echo Updating {product_name}... && run0 pacman -Syu --noconfirm && flatpak  update --assumeyes"
        self.begin_install(command, product_name)

    def begin_install(self, command, product_name):
        self.install_started = True
        self.header_bar.set_sensitive(False)
        self.header_bar.set_opacity(0) 
        self.btn_install.set_sensitive(False)
        self.btn_install.set_visible(False)
        self.btn_toggle_progress.set_sensitive(True)
        self.btn_toggle_progress.set_visible(True)
        self.current_product = product_name
        self.error_message = None  

        self.info_label.set_markup(f'<span size="large" weight="bold">{_("Updating {}...").format(self.current_product)}</span>')
        self.content_stack.set_visible_child_name("info_message")

        self.progress_data = ""
        self.progress_visible = False
        self.btn_toggle_progress.set_label(_("Show progress"))
        self.output_buffer.set_text("")  

        self.run_shell_command(command)

    def on_toggle_progress_clicked(self, button):
        self.progress_visible = not self.progress_visible

        if self.progress_visible:
            self.btn_toggle_progress.set_label(_("Hide progress"))
            self.output_buffer.set_text(self.progress_data or _("[console output]"))
            self.content_stack.set_visible_child_name("progress_view")
            # Add a small delay for the initial scroll to prevent jumping
            GLib.timeout_add(50, self.scroll_to_end)
        else:
            self.btn_toggle_progress.set_label(_("Show progress"))
            self.content_stack.set_visible_child_name("info_message")

    def run_shell_command(self, command):
        def stream_output():
            try:
                process = subprocess.Popen(command, 
                    shell=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    encoding='utf-8',
                    errors='replace'
                )

                for line in iter(process.stdout.readline, ''):
                    if line:
                        self.progress_data += line
                        GLib.idle_add(self.update_output_buffer, self.progress_data)

                process.stdout.close()
                return_code = process.wait()
                if return_code != 0:
                    self.error_message = _("Process exited with code {}").format(return_code)
            except Exception as e:
                self.error_message = str(e)
                self.progress_data += _("\nError: {}").format(e)
                GLib.idle_add(self.update_output_buffer, self.progress_data)

            GLib.idle_add(self.finish_installation)

        threading.Thread(target=stream_output, daemon=True).start()

    def update_output_buffer(self, text):
        if self.progress_visible:
            self.output_buffer.set_text(text)
            GLib.idle_add(self.scroll_to_end)
        return False

    def scroll_to_end(self):
        end_iter = self.output_buffer.get_end_iter()
        self.output_textview.scroll_to_iter(end_iter, 0.0, False, 0.0, 0.0)
        return False

    def finish_installation(self):
        self.install_started = False
        self.header_bar.set_sensitive(True)
        self.header_bar.set_opacity(1)
        self.btn_install.set_sensitive(True)
        self.btn_toggle_progress.set_sensitive(True)
        
        if self.error_message:
            self.info_label.set_markup(f'<span color="#e01b24" weight="bold" size="large">{_("Installation failed: ")}</span>\n{self.error_message}')
            self.fail_image.set_visible(True)
        else:
            self.info_label.set_markup(f'<span color="#2ec27e" weight="bold" size="large">{_("Successfully updated your {}!").format(self.current_product)}</span>')
            self.success_image.set_visible(True)
        
        self.content_stack.set_visible_child_name("info_message")
        self.progress_visible = False
        self.btn_toggle_progress.set_label(_("Show progress"))

        return False

class DaVinciApp(Adw.Application):
    def __init__(self):
        super().__init__(application_id="github.petexy.linexinupdater")

    def do_activate(self):
        win = MainWindow(self)
        win.present()

if __name__ == "__main__":
    import sys
    app = DaVinciApp()
    sys.exit(app.run())
